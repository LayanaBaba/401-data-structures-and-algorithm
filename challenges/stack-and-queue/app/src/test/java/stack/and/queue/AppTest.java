/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stack.and.queue;

import org.junit.jupiter.api.Test;

import java.net.DatagramPacket;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {

    private static Shelter shelterDog=new Shelter();
    private static Shelter shelterCat=new Shelter();

    @Test
    public void pushOntoStack(){
        Stack<java.io.Serializable> stack= new Stack<>();

        stack.push(10);
        assertEquals("10 --> Null",stack.toString());
    }
@Test    public void pushMultipleStack(){
        Stack<java.io.Serializable> stack= new Stack<>();

        stack.push(10);
        stack.push(20);
        stack.push(30);
        assertEquals("30 --> 20 --> 10 --> Null",stack.toString());
    }

    @Test
    public void popStack(){
        Stack<java.io.Serializable> stack= new Stack<>();

        stack.push(10);
        stack.push(20);
        stack.push(30);

        stack.pop();

        assertEquals("20 --> 10 --> Null",stack.toString());

    }

    @Test
    public void isEmptyStack(){
        Stack<java.io.Serializable> stack= new Stack<>();
        stack.push(10);
        stack.push(20);
        stack.push(30);

        stack.pop();
        stack.pop();
        stack.pop();
        assertEquals(true,stack.isEmpty());
    }

    @Test
    public void peekStack(){
        Stack<java.io.Serializable> stack= new Stack<>();

        assertEquals("Empty Stack.",stack.peek());
    }

    @Test
    public void instantiateEmptyStack(){
        Stack<java.io.Serializable> stack= new Stack<>();

        assertEquals(true,stack.isEmpty());
    }
    @Test
    public void callPeekOnEmptyStack(){
        Stack<java.io.Serializable> stack= new Stack<>();

        assertEquals("Empty Stack.",stack.peek());
    }

    @Test
    public void enqueueOntoQueue(){
        Queue<java.io.Serializable> queue= new Queue<>();

        queue.enqueue(10);
        assertEquals("10 --> Null",queue.toString());
    }

    @Test
    public void enqueueMultiple(){
        Queue<java.io.Serializable> queue= new Queue<>();

        queue.enqueue(10);
        queue.enqueue(20);
        queue.enqueue(30);
        assertEquals("10 --> 20 --> 30 --> Null",queue.toString());
    }

    @Test
    public void dequeueTest(){
        Queue<java.io.Serializable> queue= new Queue<>();

        queue.enqueue(10);
        queue.enqueue(20);
        queue.enqueue(30);
        queue.dequeue();
        assertEquals("20 --> 30 --> Null",queue.toString());
    }
    @Test
    public void peekIntoqueueTest(){
        Queue<java.io.Serializable> queue= new Queue<>();

        queue.enqueue(10);
        queue.enqueue(20);
        queue.enqueue(30);
        queue.peek();
        assertEquals("10 --> 20 --> 30 --> Null",queue.toString());
    }
    @Test
    public void emptyQueueAfterMultTest(){
        Queue<java.io.Serializable> queue= new Queue<>();

        queue.enqueue(10);
        queue.enqueue(20);
        queue.enqueue(30);
        queue.dequeue();
        queue.dequeue();
        queue.dequeue();

    assertEquals(true,queue.isEmpty());
    }
    @Test
    public void instantiateEmptyQueue(){
        Queue<java.io.Serializable> queue= new Queue<>();

        assertEquals(true,queue.isEmpty());
    }
    @Test
    public void callPeekOnEmptyQueue(){
        Queue<java.io.Serializable> queue= new Queue<>();

        assertEquals("Empty Queue.",queue.peek());
    }

    @Test
    public void enqueueStack(){
        StackQueuePseudo<java.io.Serializable> stackQueuePseudo= new StackQueuePseudo<>();

        stackQueuePseudo.enqueue(111);
        stackQueuePseudo.enqueue(222);
        stackQueuePseudo.enqueue(333);
        assertEquals("333 --> 222 --> 111 --> Null",stackQueuePseudo.toStringStack());
    }

    @Test
    public void dequeueStack(){
        StackQueuePseudo<java.io.Serializable> stackQueuePseudo= new StackQueuePseudo<>();

        stackQueuePseudo.enqueue(111);
        stackQueuePseudo.enqueue(222);
        stackQueuePseudo.enqueue(333);
        stackQueuePseudo.dequeue();
        assertEquals("111",stackQueuePseudo.toStringStack2());
    }

    @Test
    public void enqueueStackFailure(){
        StackQueuePseudo<java.io.Serializable> stackQueuePseudo= new StackQueuePseudo<>();

        stackQueuePseudo.enqueue(111);
        stackQueuePseudo.enqueue(222);
        stackQueuePseudo.enqueue(333);
        assertNotEquals(" 333 --> 222 --> 111 --> Null",stackQueuePseudo.toStringStack());
    }

    @Test
    public void dequeueStackFailure(){
        StackQueuePseudo<java.io.Serializable> stackQueuePseudo= new StackQueuePseudo<>();

        stackQueuePseudo.enqueue(111);
        stackQueuePseudo.enqueue(222);
        stackQueuePseudo.enqueue(333);
        stackQueuePseudo.dequeue();
        assertNotEquals("333",stackQueuePseudo.toStringStack2());
    }

    @Test
    public void shelterTest(){
        Dog dog1 = new Dog("dog1");
        Dog dog2 = new Dog("dog2");
        Dog dog3 = new Dog("dog3");

        Cat cat1 = new Cat("cat1");
        Cat cat2 = new Cat("cat2");
        Cat cat3 = new Cat("cat3");

        shelterDog.enqueue(dog1);
        shelterCat.enqueue(cat1);
        shelterDog.enqueue(dog2);
        shelterCat.enqueue(cat2);
        shelterDog.enqueue(dog3);
        shelterCat.enqueue(cat3);

        assertEquals("Dog{name='dog1'} --> Dog{name='dog2'} --> Dog{name='dog3'} --> Null",shelterDog.toString());
        assertEquals("Cat{name='cat1'} --> Cat{name='cat2'} --> Cat{name='cat3'} --> Null",shelterCat.toString());

        assertNotEquals("Dog{name='dog3'} --> Dog{name='dog2'} --> Dog{name='dog1'} --> Null",shelterDog.toString());
        assertNotEquals("Cat{name='cat3'} --> Cat{name='cat2'} --> Cat{name='cat1'} --> Null",shelterCat.toString());
    }

    @Test
    public void BracketValidationTest(){
        BracketValidation bracketValidation=new BracketValidation();

        assertTrue(bracketValidation.validateBrackets("{}"));
        assertTrue(bracketValidation.validateBrackets("{}(){}"));
        assertTrue(bracketValidation.validateBrackets("()[[Extra Characters]]"));
        assertTrue(bracketValidation.validateBrackets("(){}[[]]"));
        assertTrue(bracketValidation.validateBrackets("{}{Code}[Fellows](())"));
        assertFalse(bracketValidation.validateBrackets("[({}]"));
        assertFalse(bracketValidation.validateBrackets("[({}]"));
        assertFalse(bracketValidation.validateBrackets("{(})"));
        assertFalse(bracketValidation.validateBrackets("(]("));


    }
}

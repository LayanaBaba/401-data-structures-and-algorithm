/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hashtable;

import BinaryTrees.BinaryTree;
import BinaryTrees.Node;

public class App {

    public static void main(String[] args) {
        HashTable<String, String> studentAllowences = new HashTable<>();

//        studentAllowences.add("aaa", 300);
//        studentAllowences.add("bbb", 400);
//        studentAllowences.add("kkkk", 3510);
//        studentAllowences.add("jjjj", 3004);
//
//        System.out.println(" the size is => "+ studentAllowences.getSize());
//        System.out.println( studentAllowences.get("aaa"));
//        System.out.println( studentAllowences.get("kkkk"));
//        System.out.println( studentAllowences.contain("kkkk"));
//        System.out.println( studentAllowences.contain("sss"));
//
//        System.out.println(studentAllowences.remove("aaa"));
//        System.out.println(" the size is => "+ studentAllowences.getSize());

//        String input = "Once upon a time, there was a brave princess who...";

//        String input = "Taco cat ate a taco";
//        System.out.println(studentAllowences.firstRepeated(input));

//        System.out.println(studentAllowences.firstRepeated(input));

        BinaryTree binaryTree1= new BinaryTree();

        binaryTree1.setRoot(new Node(300));
        binaryTree1.getRoot().setLeft(new Node(2));
        binaryTree1.getRoot().setRight(new Node(3));
        binaryTree1.getRoot().getLeft().setLeft(new Node(50));
        binaryTree1.getRoot().getLeft().setRight(new Node(200));
        binaryTree1.getRoot().getRight().setLeft(new Node(150));
        binaryTree1.getRoot().getRight().setRight(new Node(90));

        BinaryTree binaryTree2= new BinaryTree();

        binaryTree2.setRoot(new Node(1));
        binaryTree2.getRoot().setLeft(new Node(0));
        binaryTree2.getRoot().setRight(new Node(7));
        binaryTree2.getRoot().getLeft().setLeft(new Node(90));
        binaryTree2.getRoot().getLeft().setRight(new Node(8));
        binaryTree2.getRoot().getRight().setLeft(new Node(15));
        binaryTree2.getRoot().getRight().setRight(new Node(200));

        System.out.println(studentAllowences.repeatedNodes(binaryTree1,binaryTree2));


        HashTable<String, String> first = new HashTable<>();
        HashTable<String, String> second = new HashTable<>();

        first.add("fond","enamored");
        first.add("wrath","anger");
        first.add("guide","usher");

        second.add("fond","averse");
        second.add("wrath","delight");
        second.add("guide","follow");

        System.out.println(studentAllowences.leftJoin(first,second));
    }
}

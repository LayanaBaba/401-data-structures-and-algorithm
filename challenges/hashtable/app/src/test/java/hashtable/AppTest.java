/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hashtable;

import BinaryTrees.BinaryTree;
import BinaryTrees.Node;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    private HashTable<String, Integer> test = new HashTable<>();
    @Test
    public void addTest(){
    test.add("Layana1",1);
    test.add("Layana2",2);
    test.add("Layana3",3);
    test.add("Layana4",4);
    }

    @Test
    public void addAssertTest(){
        test.add("Layana5",5);
        assertEquals(test.get("Layana5"), 5);
    }

    @Test
    public void nullTest(){
        assertNull(test.get("Layana"));
    }

    @Test
    public void containTest(){
        test.add("Layana1",1);
        test.add("Layana2",2);

        assertTrue(test.contain("Layana1"));
    }

    @Test
    public void uncontainedTest(){
        test.add("Layana1",1);
        test.add("Layana2",2);

        assertFalse(test.contain("Layana"));
    }

    @Test
    public void sizeTest(){
        test.add("Layana1",1);
        test.add("Layana2",2);

        assertEquals(2,test.getSize());
    }

    @Test
    public void removeTest(){
        test.add("Layana1",1);
        test.add("Layana2",2);

        assertEquals(2,test.getSize());

        test.remove("Layana1");

        assertEquals(1,test.getSize());
    }

    @Test
    public void repeatedWordTest(){
        String input = "Once upon a time, there was a brave princess who...";
        String expected = test.firstRepeated(input);
        assertEquals("a", expected);
    }

    @Test
    public void repeatedWordFailedTest(){
        String input = "Once upon a time, there was a brave princess who...";
        String expected = test.firstRepeated(input);
        assertNotEquals("Once", expected);
    }

    @Test
    public void repeatedNodeTest(){
        BinaryTree binaryTree1= new BinaryTree();

        binaryTree1.setRoot(new Node(300));
        binaryTree1.getRoot().setLeft(new Node(2));
        binaryTree1.getRoot().setRight(new Node(3));
        binaryTree1.getRoot().getLeft().setLeft(new Node(50));

        BinaryTree binaryTree2= new BinaryTree();

        binaryTree2.setRoot(new Node(1));
        binaryTree2.getRoot().setLeft(new Node(300));
        binaryTree2.getRoot().setRight(new Node(7));
        binaryTree2.getRoot().getLeft().setLeft(new Node(90));
        binaryTree2.getRoot().getLeft().setRight(new Node(8));

        assertEquals("[300]",test.repeatedNodes(binaryTree1,binaryTree2));
    }

    @Test
    public void repeatedNodeFailedTest(){
        BinaryTree binaryTree1= new BinaryTree();

        binaryTree1.setRoot(new Node(300));
        binaryTree1.getRoot().setLeft(new Node(2));
        binaryTree1.getRoot().setRight(new Node(3));
        binaryTree1.getRoot().getLeft().setLeft(new Node(50));

        BinaryTree binaryTree2= new BinaryTree();

        binaryTree2.setRoot(new Node(1));
        binaryTree2.getRoot().setLeft(new Node(300));
        binaryTree2.getRoot().setRight(new Node(7));
        binaryTree2.getRoot().getLeft().setLeft(new Node(90));
        binaryTree2.getRoot().getLeft().setRight(new Node(8));

        assertNotEquals("[20]", test.repeatedNodes(binaryTree1,binaryTree2));
    }
}

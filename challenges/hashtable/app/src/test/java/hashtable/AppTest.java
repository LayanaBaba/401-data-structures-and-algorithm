/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hashtable;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    private HashTable<String, Integer> test = new HashTable<>();
    private HashTable<String, String> test1 = new HashTable<>();
    @Test
    public void addTest(){
    test.add("Layana1",1);
    test.add("Layana2",2);
    test.add("Layana3",3);
    test.add("Layana4",4);
    }

    @Test
    public void addAssertTest(){
        test.add("Layana5",5);
        assertEquals(test.get("Layana5"), 5);
    }

    @Test
    public void nullTest(){
        assertNull(test.get("Layana"));
    }

    @Test
    public void containTest(){
        test.add("Layana1",1);
        test.add("Layana2",2);

        assertTrue(test.contain("Layana1"));
    }

    @Test
    public void uncontainedTest(){
        test.add("Layana1",1);
        test.add("Layana2",2);

        assertFalse(test.contain("Layana"));
    }

    @Test
    public void sizeTest(){
        test.add("Layana1",1);
        test.add("Layana2",2);

        assertEquals(2,test.getSize());
    }

    @Test
    public void removeTest(){
        test.add("Layana1",1);
        test.add("Layana2",2);

        assertEquals(2,test.getSize());

        test.remove("Layana1");

        assertEquals(1,test.getSize());
    }

    @Test
    public void repeatedWordTest(){
        String input = "Once upon a time, there was a brave princess who...";
        String expected = test.firstRepeated(input);
        assertEquals("a", expected);
    }

    @Test
    public void repeatedWordFailedTest(){
        String input = "Once upon a time, there was a brave princess who...";
        String expected = test.firstRepeated(input);
        assertNotEquals("Once", expected);
    }

    @Test
    public void leftJoinTest(){
        HashTable<String, String> first = new HashTable<>();
        HashTable<String, String> second = new HashTable<>();

        first.add("fond","enamored");
        first.add("wrath","anger");
        first.add("guide","usher");

        second.add("fond","averse");
        second.add("wrath","delight");
        second.add("guide","follow");

        assertEquals("[[fond, enamored, averse], [wrath, anger, delight], [guide, usher, follow]]", test1.leftJoin(first,second).toString());
    }

    @Test
    public void leftJoinFailedTest(){
        HashTable<String, String> first = new HashTable<>();
        HashTable<String, String> second = new HashTable<>();

        first.add("fond","enamored");
        first.add("wrath","anger");
        first.add("guide","usher");

        second.add("fond","averse");
        second.add("wrath","delight");
        second.add("guide","follow");

        assertNotEquals("[[fond, averse], [anger, delight], [guide, usher,]]", test1.leftJoin(first,second).toString());
    }
}

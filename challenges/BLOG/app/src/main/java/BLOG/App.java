/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package BLOG;


import java.util.Arrays;

public class App {
    public static void main(String[] args) {
     int arr[]= {8,4,23,42,16,15};
        sortArr(arr);

     mergeSort(arr,0,5);
        int n = arr.length;
        quikSort(arr, 0, n-1);
        System.out.println("-----------");
        display(arr, n);

    }

    static void quikSort(int[] arr, int left, int right){
        if (left < right){
           int  position = partition(arr, left, right);

            quikSort(arr, left, position-1);
            quikSort(arr, position+1, right);
        }
    }

    static int partition(int [] arr, int left, int right){
        int pivot = arr[right];

        int i = left - 1;

        for (int j = left; j <= right-1 ; j++) {
            if(arr[j] < pivot){
                i++;
                swap(arr, i, j);
            }
        }
        swap(arr, i+1, right);
        return i+1;
    }

    static void swap(int[] arr, int i, int j){
        int temp = arr[i];
        arr[i]= arr[j];
        arr[j]= temp;

    }

    static void display(int[] arr, int size){
        for (int i = 0; i < size; i++) {
            System.out.println(arr[i]+ " ");
        }
    }

   static void merge(int Arr[], int start, int mid, int end) {

        int temp[] = new int[end - start + 1];

        int i = start, j = mid+1, k = 0;

        while(i <= mid && j <= end) {
            if(Arr[i] <= Arr[j]) {
                temp[k] = Arr[i];
                k += 1; i += 1;
            }
            else {
                temp[k] = Arr[j];
                k += 1; j += 1;
            }
        }

        while(i <= mid) {
            temp[k] = Arr[i];
            k += 1; i += 1;
        }

        while(j <= end) {
            temp[k] = Arr[j];
            k += 1; j += 1;
        }

        for(i = start; i <= end; i += 1) {
            Arr[i] = temp[i - start];
        }
       System.out.println(Arrays.toString(Arr));
    }

    static void mergeSort(int Arr[], int start, int end) {

        if(start < end) {
            int mid = (start + end) / 2;
            mergeSort(Arr, start, mid);
            mergeSort(Arr, mid+1, end);
            merge(Arr, start, mid, end);
        }
    }

    public static void sortArr(int[] arr){
           int n = arr.length;

        for (int i = 0; i <n; i++) {
            int min = i;
            for (int j = i+1; j < n; j++) {
                if(arr[j]< arr[min]){
                    min=j;
                }
            }
            int temp = arr [min];
            arr[min]= arr[i];
            arr[i]= temp;
            System.out.println(arr[i]);
            }

        }

}
